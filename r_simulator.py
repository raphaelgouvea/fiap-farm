#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
FIAP Farm - Simulador de Funcionalidades R
FarmTech Solutions

Este arquivo simula as funcionalidades R quando o R n√£o est√° instalado no sistema.
Implementa as mesmas an√°lises estat√≠sticas e meteorol√≥gicas em Python.
"""

import json
import statistics
import math
from datetime import datetime
import os

class RSimulator:
    """Simulador das funcionalidades R em Python"""
    
    def __init__(self):
        self.dados_exemplo = {
            'producao': [1200, 1350, 1180, 1420, 1290, 1380, 1150, 1340],
            'custos': [45000, 52000, 43000, 58000, 49000, 55000, 41000, 53000],
            'areas': [12.5, 15.2, 11.8, 16.7, 13.9, 15.8, 10.9, 14.6],
            'temperaturas': [23.5, 25.2, 22.8, 26.1, 24.3, 25.7, 21.9, 24.8]
        }
    
    def calcular_estatisticas(self, dados):
        """Calcula estat√≠sticas descritivas (equivalente ao R)"""
        if not dados or len(dados) == 0:
            return None
        
        n = len(dados)
        media = statistics.mean(dados)
        desvio_padrao = statistics.stdev(dados) if n > 1 else 0
        variancia = statistics.variance(dados) if n > 1 else 0
        mediana = statistics.median(dados)
        minimo = min(dados)
        maximo = max(dados)
        
        return {
            'n': n,
            'media': round(media, 4),
            'desvio_padrao': round(desvio_padrao, 4),
            'variancia': round(variancia, 4),
            'mediana': round(mediana, 4),
            'minimo': minimo,
            'maximo': maximo,
            'amplitude': maximo - minimo,
            'coef_variacao': round((desvio_padrao / media) * 100, 2) if media != 0 else 0
        }
    
    def gerar_relatorio_estatistico(self, tipo_dados=None):
        """Gera relat√≥rio estat√≠stico completo"""
        print("\n" + "="*60)
        print("         FIAP FARM - RELAT√ìRIO ESTAT√çSTICO")
        print("              FarmTech Solutions")
        print("="*60)
        print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        print("="*60)
        
        if tipo_dados:
            # Usar dados espec√≠ficos fornecidos
            dados_para_analise = {tipo_dados: self.dados_exemplo.get(tipo_dados, [])}
        else:
            # Usar todos os dados de exemplo
            dados_para_analise = self.dados_exemplo
        
        for categoria, valores in dados_para_analise.items():
            if not valores:
                continue
                
            print(f"\nüìä AN√ÅLISE: {categoria.upper()}")
            print("-" * 40)
            
            stats = self.calcular_estatisticas(valores)
            if stats:
                print(f"Dados analisados: {valores}")
                print(f"Quantidade de observa√ß√µes (n): {stats['n']}")
                print(f"M√©dia: {stats['media']}")
                print(f"Desvio Padr√£o: {stats['desvio_padrao']}")
                print(f"Vari√¢ncia: {stats['variancia']}")
                print(f"Mediana: {stats['mediana']}")
                print(f"Valor M√≠nimo: {stats['minimo']}")
                print(f"Valor M√°ximo: {stats['maximo']}")
                print(f"Amplitude: {stats['amplitude']}")
                print(f"Coeficiente de Varia√ß√£o: {stats['coef_variacao']}%")
        
        print("\n" + "="*60)
        print("Relat√≥rio gerado com sucesso!")
        print("Nota: Este relat√≥rio foi gerado pelo simulador Python")
        print("equivalente √†s funcionalidades R.")
        print("="*60)
    
    def obter_dados_meteorologicos(self, cidade="S√£o Paulo"):
        """Simula obten√ß√£o de dados meteorol√≥gicos (equivalente ao R)"""
        # Dados simulados para demonstra√ß√£o
        dados_simulados = {
            "S√£o Paulo": {
                "temperatura": 23.5,
                "umidade": 65,
                "pressao": 1013.2,
                "vento": 12.3,
                "condicao": "Parcialmente nublado",
                "visibilidade": 10,
                "uv_index": 6
            },
            "Rio de Janeiro": {
                "temperatura": 28.2,
                "umidade": 72,
                "pressao": 1015.8,
                "vento": 8.7,
                "condicao": "Ensolarado",
                "visibilidade": 15,
                "uv_index": 8
            },
            "Bras√≠lia": {
                "temperatura": 25.1,
                "umidade": 45,
                "pressao": 1012.5,
                "vento": 15.2,
                "condicao": "C√©u limpo",
                "visibilidade": 20,
                "uv_index": 9
            }
        }
        
        return dados_simulados.get(cidade, dados_simulados["S√£o Paulo"])
    
    def gerar_relatorio_meteorologico(self, cidade="S√£o Paulo"):
        """Gera relat√≥rio meteorol√≥gico"""
        print("\n" + "="*60)
        print("         FIAP FARM - RELAT√ìRIO METEOROL√ìGICO")
        print("              FarmTech Solutions")
        print("="*60)
        print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        print(f"Localiza√ß√£o: {cidade}")
        print("="*60)
        
        dados = self.obter_dados_meteorologicos(cidade)
        
        print(f"\nüå§Ô∏è  CONDI√á√ïES METEOROL√ìGICAS ATUAIS")
        print("-" * 40)
        print(f"Temperatura: {dados['temperatura']}¬∞C")
        print(f"Umidade Relativa: {dados['umidade']}%")
        print(f"Press√£o Atmosf√©rica: {dados['pressao']} hPa")
        print(f"Velocidade do Vento: {dados['vento']} km/h")
        print(f"Condi√ß√£o Geral: {dados['condicao']}")
        print(f"Visibilidade: {dados['visibilidade']} km")
        print(f"√çndice UV: {dados['uv_index']}")
        
        # An√°lise para agricultura
        print(f"\nüå± AN√ÅLISE PARA AGRICULTURA")
        print("-" * 40)
        
        if dados['temperatura'] < 15:
            print("‚ö†Ô∏è  Temperatura baixa - Risco para culturas sens√≠veis ao frio")
        elif dados['temperatura'] > 35:
            print("‚ö†Ô∏è  Temperatura alta - Necess√°rio irriga√ß√£o adicional")
        else:
            print("‚úÖ Temperatura adequada para a maioria das culturas")
        
        if dados['umidade'] < 40:
            print("‚ö†Ô∏è  Umidade baixa - Considerar irriga√ß√£o")
        elif dados['umidade'] > 80:
            print("‚ö†Ô∏è  Umidade alta - Monitorar fungos e pragas")
        else:
            print("‚úÖ Umidade adequada")
        
        if dados['vento'] > 25:
            print("‚ö†Ô∏è  Vento forte - Risco para culturas altas")
        else:
            print("‚úÖ Velocidade do vento normal")
        
        print("\n" + "="*60)
        print("Relat√≥rio meteorol√≥gico gerado com sucesso!")
        print("Nota: Dados simulados para demonstra√ß√£o.")
        print("Em produ√ß√£o, conectaria com API meteorol√≥gica real.")
        print("="*60)

def main():
    """Fun√ß√£o principal - Menu interativo"""
    simulator = RSimulator()
    
    while True:
        print("\n" + "="*50)
        print("    FIAP FARM - SIMULADOR R (Python)")
        print("         FarmTech Solutions")
        print("="*50)
        print("1. An√°lise Estat√≠stica Completa")
        print("2. An√°lise de Produ√ß√£o")
        print("3. An√°lise de Custos")
        print("4. An√°lise de √Åreas")
        print("5. An√°lise de Temperaturas")
        print("6. Relat√≥rio Meteorol√≥gico - S√£o Paulo")
        print("7. Relat√≥rio Meteorol√≥gico - Rio de Janeiro")
        print("8. Relat√≥rio Meteorol√≥gico - Bras√≠lia")
        print("9. Sair")
        print("="*50)
        
        try:
            opcao = input("Escolha uma op√ß√£o (1-9): ").strip()
            
            if opcao == "1":
                simulator.gerar_relatorio_estatistico()
            elif opcao == "2":
                simulator.gerar_relatorio_estatistico("producao")
            elif opcao == "3":
                simulator.gerar_relatorio_estatistico("custos")
            elif opcao == "4":
                simulator.gerar_relatorio_estatistico("areas")
            elif opcao == "5":
                simulator.gerar_relatorio_estatistico("temperaturas")
            elif opcao == "6":
                simulator.gerar_relatorio_meteorologico("S√£o Paulo")
            elif opcao == "7":
                simulator.gerar_relatorio_meteorologico("Rio de Janeiro")
            elif opcao == "8":
                simulator.gerar_relatorio_meteorologico("Bras√≠lia")
            elif opcao == "9":
                print("\nüëã Obrigado por usar o FIAP Farm!")
                print("Sistema encerrado com sucesso.")
                break
            else:
                print("\n‚ùå Op√ß√£o inv√°lida! Escolha entre 1-9.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Sistema encerrado pelo usu√°rio.")
            break
        except Exception as e:
            print(f"\n‚ùå Erro: {e}")
            print("Tente novamente.")

if __name__ == "__main__":
    main()